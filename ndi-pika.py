import base64
exec(base64.b64decode('import os
import sys
import random
import socket
import select
import datetime
import threading

lock = threading.RLock(); os.system('cls' if os.name == 'nt' else 'clear')

def real_path(file_name):
    return os.path.dirname(os.path.abspath(__file__)) + file_name

def filter_array(array):
    for i in range(len(array)):
        array[i] = array[i].strip()
        if array[i].startswith('#'):
            array[i] = ''

    return [x for x in array if x]

def colors(value):
    patterns = {
        'R1' : '\033[31;1m', 'R2' : '\033[31;2m',
        'G1' : '\033[32;1m', 'Y1' : '\033[33;1m',
        'P1' : '\033[35;1m', 'CC' : '\033[0m'
    }

    for code in patterns:
        value = value.replace('[{}]'.format(code), patterns[code])

    return value

def log(value, status='', color=''):
    value = colors('{color}[{time}] [CC]>>{color}{status} [CC]{color}{value}[CC]'.format(
        time=datetime.datetime.now().strftime('%H:%M'),
        value=value,
        color=color,
        status=status
    ))
    with lock: print(value)

class inject(object):
    def __init__(self, inject_host, inject_port):
        super(inject, self).__init__()

        self.inject_host = str(inject_host)
        self.inject_port = int(inject_port)

    def log(self, value, color='[G1]'):
        log(value, color=color)

    def start(self):
        try:
            socket_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket_server.bind((self.inject_host, self.inject_port))
            socket_server.listen(1)
            frontend_domains = open(real_path('/config.txt.enc')).readlines()
            frontend_domains = filter_array(frontend_domains)
            if len(frontend_domains) == 0:
                self.log('Frontend Domains not found. Please check config.txt.enc', color='G1')
                return
            self.log('🚀+[ Start Psiphonnya Bosku ]+🚀 \n[CC]Local Host/Port : [CC]127.0.0.1/8080'.format(self.inject_host, self.inject_port))
            while True:
                socket_client, _ = socket_server.accept()
                socket_client.recv(4096)
                domain_fronting(socket_client, frontend_domains).start()
        except Exception as exception:
            self.log('❌Script Error!!. Hapus Data & Mulai Ulang‼️'.format(self.inject_host, self.inject_port), color='[R1]')

class domain_fronting(threading.Thread):
    def __init__(self, socket_client, frontend_domains):
        super(domain_fronting, self).__init__()

        self.frontend_domains = frontend_domains
        self.socket_tunnel = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket_client = socket_client
        self.buffer_size = 1024
        self.daemon = True

    def log(self, value, status=' ', 
    color=''):
        log(value, status=status, color=color)

    def handler(self, socket_tunnel, socket_client, buffer_size):
        sockets = [socket_tunnel, socket_client]
        timeout = 0
        while True:
            timeout += 1
            socket_io, _, errors = select.select(sockets, [], sockets, 3)
            if errors: break
            if socket_io:
                for sock in socket_io:
                    try:
                        data = sock.recv(buffer_size)
                        if not data: break
                        # SENT -> RECEIVED
                        elif sock is socket_client:
                            socket_tunnel.sendall(data)
                        elif sock is socket_tunnel:
                            socket_client.sendall(data)
                        timeout = 0
                    except: break
            if timeout == 60: break

    def run(self):
        try:
            self.proxy_host_port = random.choice(self.frontend_domains).split(':')
            self.proxy_host = self.proxy_host_port[0]
            self.proxy_port = self.proxy_host_port[1] if len(self.proxy_host_port) >= 2 and self.proxy_host_port[1] else '443'
            self.log('[G1]Tunggu Sebentar... !!!','[CC]''[Y1]   >>>>','[CC]'.format(self.proxy_host, self.proxy_port))
            self.log('[P1]   Orang Sabar Di Sayang Janda','[CC]'.format(self.proxy_host, self.proxy_port))
            self.socket_tunnel.connect((str(self.proxy_host), int(self.proxy_port)))
            self.socket_client.sendall(b'HTTP/1.1 200 OK\r\n\r\n')
            self.handler(self.socket_tunnel, self.socket_client, self.buffer_size)
            self.socket_client.close()
            self.socket_tunnel.close()
            self.log('✰|_____Sudah Konek Bosku_____|✰'.format(self.proxy_host, self.proxy_port), color='[R1]')
        except OSError:
            self.log('Connection error', color='[R1]')
        except TimeoutError:
            self.log('{} not responding'.format(self.proxy_host), color='[R1]')

print(colors('\n'.join([
        '[Y1]══════════════════════════════════════', '[CC]'
        '[R1]  █░░░█ █▀▀ █░░ █░░ ▄▀  ▄▀▄ █▄░▄█ █▀▀''[CC]''[R1]ㅤ''[CC]''[R1]ㅤ', '[CC]'
        '[R1]  █░█░█ █▀▀ █░▄ █░▄ █░  █░█ █░█░█ █▀▀''[CC]''[R1]ㅤ''[CC]''[R1]ㅤ', '[CC]'
        '[Y1]  ░▀░▀░ ▀▀▀ ▀▀▀ ▀▀▀ ░▀  ░▀░ ▀░░░▀ ▀▀▀''[CC]''[R1]ㅤ''[CC]''[R1]ㅤ', '[CC]'
        '[Y1]══════════════════════════════════════', '[CC]'
        '[R1]      [''[CC]''[Y1]+''[CC]''[R1]]''[CC]''[G1]𝗚𝗥𝗘𝗧𝗢𝗡𝗚𝗘𝗥𝗦 𝗜𝗡𝗗𝗢𝗡𝗘𝗦𝗜𝗔''[CC]''[R1][''[CC]''[Y1]+''[CC]''[R1]]''[CC]'
        '[R1] ', '[CC]'
        '[R1] ╔[''[CC]''[Y1]+''[CC]''[R1]]''[CC]''[Y1] Script Telkomsel GamesMax', '[CC]'
        '[R1] ║', '[CC]'   
        '[R1] ╠[''[CC]''[Y1]*''[CC]''[R1]]''[CC]''[R1] IMPORMASI', '[CC]'
        '[R1] ║{''[CC]''[Y1]1''[CC]''[R1]}''[CC]''[Y1] Sunek On Off Data Mode Pesawat', '[CC]'
        '[R1] ║{''[CC]''[Y1]2''[CC]''[R1]}''[CC]''[Y1] Inject Qpython Termux', '[CC]'
        '[R1] ╠[''[CC]''[Y1]*''[CC]''[R1]]''[CC]''[R1] Set Psiphon', '[CC]'
        '[R1] ║{''[CC]''[Y1]3''[CC]''[R1]}''[CC]''[Y1] Host 127.0.0.1', '[CC]'
        '[R1] ║{''[CC]''[Y1]4''[CC]''[R1]}''[CC]''[Y1] Port 8080', '[CC]'
        '[R1] ╚═══════════════════════≽', '[CC]'
        '[R1] ', '[CC]'
        '[R1] ╔[''[CC]''[G1]☆''[CC]''[R1]]''[CC]''[P1] Whatsapp 082259285886', '[CC]'
        '[R1] ╚[''[CC]''[G1]☆''[CC]''[R1]]''[CC]''[P1] Script By Pikachu', '[CC]'
        '[R1] ', '[CC]'
        '[R1]  [''[CC]''[G1]●''[CC]''[R1]]''[CC]''[R1] Virus apa yang lagi viral?', '[CC]'
        '[R1]', '[CC]',
    ])))
def main():
    G = ' Enter your password !'
    like = 'corona'
    user_input = raw_input('  Jawaban : ')
    if user_input != like:
        sys.exit('  WRONG INPUT!!┌П┐(◣_◢)┌П┐\n')
    print ' Inject Berhasil\n'
    inject('127.0.0.1', '8080').start()

if __name__ == '__main__':
    main()
'))